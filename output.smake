#	ARMv8-a assembly code generated by 
#	'B-Minor Compiler' v1.0,
#	written by:
#
#	PAYTON JAMES SHALTIS
#	COMPLETED MAY 4TH, 2021 for
#
#	CSC-425: "Compilers and Interpreters", 
#	Professor John DeGood, Spring 2021 at
#	The College of New Jersey

.arch armv8-a
.file "output.smake"

.text
	.global recurse
	recurse:
		stp	x29, x30, [sp, #-72]!
		str	x0, [sp, 16]
		ldr	x9, [sp, 16]
		mov	x10, 0
		cmp	x9, x10
		b.gt	.LCOND1
		mov	x10, 0
		b	.LCOND2
	.LCOND1:
		mov	x10, 1
	.LCOND2:
		cmp	x10, 0
		b.eq	.LSTMT1
		ldr	x9, [sp, 16]
		mov	x0, x9
		bl	print_integer
		adrp	x9, .LSLIT1
		add	x9, x9, :lo12:.LSLIT1
		mov	x0, x9
		bl	print_string
		str	x9, [sp, 24]
		str	x10, [sp, 32]
		str	x11, [sp, 40]
		str	x12, [sp, 48]
		str	x13, [sp, 56]
		str	x14, [sp, 64]
		str	x15, [sp, 72]
		ldr	x9, [sp, 16]
		mov	x11, 1
		sub	x11, x9, x11
		mov	x0, x11
		bl	recurse
		ldr	x9, [sp, 24]
		ldr	x10, [sp, 32]
		ldr	x11, [sp, 40]
		ldr	x12, [sp, 48]
		ldr	x13, [sp, 56]
		ldr	x14, [sp, 64]
		ldr	x15, [sp, 72]
		mov	x9, x0
		mov	x0, x9
		ldp	x29, x30, [sp], #72
		ret
	.LSTMT1:
		mov	x9, 0
		mov	x0, x9
		ldp	x29, x30, [sp], #72
		ret
		ldp	x29, x30, [sp], #72
		ret
	.section	.rodata
	.align 8
.LSLIT1:
	.string " "
.text
	.global complex
	complex:
		stp	x29, x30, [sp, #-64]!
		adrp	x9, .LSLIT2
		add	x9, x9, :lo12:.LSLIT2
		mov	x0, x9
		bl	print_string
		str	x9, [sp, 16]
		str	x10, [sp, 24]
		str	x11, [sp, 32]
		str	x12, [sp, 40]
		str	x13, [sp, 48]
		str	x14, [sp, 56]
		str	x15, [sp, 64]
		bl	helper1
		ldr	x9, [sp, 16]
		ldr	x10, [sp, 24]
		ldr	x11, [sp, 32]
		ldr	x12, [sp, 40]
		ldr	x13, [sp, 48]
		ldr	x14, [sp, 56]
		ldr	x15, [sp, 64]
		mov	x9, x0
		mov	x0, x9
		bl	print_string
		adrp	x9, .LSLIT3
		add	x9, x9, :lo12:.LSLIT3
		mov	x0, x9
		bl	print_string
		adrp	x9, .LSLIT4
		add	x9, x9, :lo12:.LSLIT4
		mov	x0, x9
		bl	print_string
		str	x9, [sp, 16]
		str	x10, [sp, 24]
		str	x11, [sp, 32]
		str	x12, [sp, 40]
		str	x13, [sp, 48]
		str	x14, [sp, 56]
		str	x15, [sp, 64]
		bl	helper2
		ldr	x9, [sp, 16]
		ldr	x10, [sp, 24]
		ldr	x11, [sp, 32]
		ldr	x12, [sp, 40]
		ldr	x13, [sp, 48]
		ldr	x14, [sp, 56]
		ldr	x15, [sp, 64]
		mov	x9, x0
		mov	x0, x9
		bl	print_string
		adrp	x9, .LSLIT5
		add	x9, x9, :lo12:.LSLIT5
		mov	x0, x9
		bl	print_string
		adrp	x9, .LSLIT6
		add	x9, x9, :lo12:.LSLIT6
		mov	x0, x9
		bl	print_string
		str	x9, [sp, 16]
		str	x10, [sp, 24]
		str	x11, [sp, 32]
		str	x12, [sp, 40]
		str	x13, [sp, 48]
		str	x14, [sp, 56]
		str	x15, [sp, 64]
		bl	helper3
		ldr	x9, [sp, 16]
		ldr	x10, [sp, 24]
		ldr	x11, [sp, 32]
		ldr	x12, [sp, 40]
		ldr	x13, [sp, 48]
		ldr	x14, [sp, 56]
		ldr	x15, [sp, 64]
		mov	x9, x0
		mov	x0, x9
		bl	print_string
		adrp	x9, .LSLIT7
		add	x9, x9, :lo12:.LSLIT7
		mov	x0, x9
		bl	print_string
		ldp	x29, x30, [sp], #64
		ret
	.section	.rodata
	.align 8
.LSLIT2:
	.string "Let's call helper function 1: "
	.section	.rodata
	.align 8
.LSLIT3:
	.string "\n"
	.section	.rodata
	.align 8
.LSLIT4:
	.string "Let's call helper function 2: "
	.section	.rodata
	.align 8
.LSLIT5:
	.string "\n"
	.section	.rodata
	.align 8
.LSLIT6:
	.string "Let's call helper function 3: "
	.section	.rodata
	.align 8
.LSLIT7:
	.string "\n"
.text
	.global helper1
	helper1:
		stp	x29, x30, [sp, #-64]!
		adrp	x9, .LSLIT8
		add	x9, x9, :lo12:.LSLIT8
		mov	x0, x9
		ldp	x29, x30, [sp], #64
		ret
		ldp	x29, x30, [sp], #64
		ret
	.section	.rodata
	.align 8
.LSLIT8:
	.string "helper1 works!"
.text
	.global helper2
	helper2:
		stp	x29, x30, [sp, #-64]!
		str	x9, [sp, 16]
		str	x10, [sp, 24]
		str	x11, [sp, 32]
		str	x12, [sp, 40]
		str	x13, [sp, 48]
		str	x14, [sp, 56]
		str	x15, [sp, 64]
		bl	helper1
		ldr	x9, [sp, 16]
		ldr	x10, [sp, 24]
		ldr	x11, [sp, 32]
		ldr	x12, [sp, 40]
		ldr	x13, [sp, 48]
		ldr	x14, [sp, 56]
		ldr	x15, [sp, 64]
		mov	x9, x0
		adrp	x10, .LSLIT9
		add	x10, x10, :lo12:.LSLIT9
		mov	x11, 0
	.LSTMT2:
		ldrb	w0, [x9, x11]
		ldrb	w1, [x10, x11]
		cmp	w0, w1
		b.ne	.LSTMT4
		cmp	w0, 0
		b.eq	.LSTMT3
		add	x11, x11, 1
		b	.LSTMT2
	.LSTMT4:
		mov	x11, 0
		b	.LSTMT5
	.LSTMT3:
		mov	x11, 1
	.LSTMT5:
		cmp	x11, 0
		b.eq	.LSTMT6
		adrp	x9, .LSLIT10
		add	x9, x9, :lo12:.LSLIT10
		mov	x0, x9
		ldp	x29, x30, [sp], #64
		ret
		b	.LSTMT7
	.LSTMT6:
		adrp	x9, .LSLIT11
		add	x9, x9, :lo12:.LSLIT11
		mov	x0, x9
		ldp	x29, x30, [sp], #64
		ret
	.LSTMT7:
		ldp	x29, x30, [sp], #64
		ret
	.section	.rodata
	.align 8
.LSLIT9:
	.string "helper1 works!"
	.section	.rodata
	.align 8
.LSLIT10:
	.string "helper2 works!"
	.section	.rodata
	.align 8
.LSLIT11:
	.string "something wrong with helper2!"
.text
	.global helper3
	helper3:
		stp	x29, x30, [sp, #-64]!
		str	x9, [sp, 16]
		str	x10, [sp, 24]
		str	x11, [sp, 32]
		str	x12, [sp, 40]
		str	x13, [sp, 48]
		str	x14, [sp, 56]
		str	x15, [sp, 64]
		bl	helper1
		ldr	x9, [sp, 16]
		ldr	x10, [sp, 24]
		ldr	x11, [sp, 32]
		ldr	x12, [sp, 40]
		ldr	x13, [sp, 48]
		ldr	x14, [sp, 56]
		ldr	x15, [sp, 64]
		mov	x9, x0
		adrp	x10, .LSLIT12
		add	x10, x10, :lo12:.LSLIT12
		mov	x11, 0
	.LSTMT8:
		ldrb	w0, [x9, x11]
		ldrb	w1, [x10, x11]
		cmp	w0, w1
		b.ne	.LSTMT10
		cmp	w0, 0
		b.eq	.LSTMT9
		add	x11, x11, 1
		b	.LSTMT8
	.LSTMT10:
		mov	x11, 0
		b	.LSTMT11
	.LSTMT9:
		mov	x11, 1
	.LSTMT11:
		str	x9, [sp, 16]
		str	x10, [sp, 24]
		str	x11, [sp, 32]
		str	x12, [sp, 40]
		str	x13, [sp, 48]
		str	x14, [sp, 56]
		str	x15, [sp, 64]
		bl	helper2
		ldr	x9, [sp, 16]
		ldr	x10, [sp, 24]
		ldr	x11, [sp, 32]
		ldr	x12, [sp, 40]
		ldr	x13, [sp, 48]
		ldr	x14, [sp, 56]
		ldr	x15, [sp, 64]
		mov	x9, x0
		adrp	x10, .LSLIT13
		add	x10, x10, :lo12:.LSLIT13
		mov	x12, 0
	.LSTMT12:
		ldrb	w0, [x9, x12]
		ldrb	w1, [x10, x12]
		cmp	w0, w1
		b.ne	.LSTMT14
		cmp	w0, 0
		b.eq	.LSTMT13
		add	x12, x12, 1
		b	.LSTMT12
	.LSTMT14:
		mov	x12, 0
		b	.LSTMT15
	.LSTMT13:
		mov	x12, 1
	.LSTMT15:
		and	x12, x11, x12
		cmp	x12, 0
		b.eq	.LSTMT16
		adrp	x9, .LSLIT14
		add	x9, x9, :lo12:.LSLIT14
		mov	x0, x9
		ldp	x29, x30, [sp], #64
		ret
		b	.LSTMT17
	.LSTMT16:
		adrp	x9, .LSLIT15
		add	x9, x9, :lo12:.LSLIT15
		mov	x0, x9
		ldp	x29, x30, [sp], #64
		ret
	.LSTMT17:
		ldp	x29, x30, [sp], #64
		ret
	.section	.rodata
	.align 8
.LSLIT12:
	.string "helper1 works!"
	.section	.rodata
	.align 8
.LSLIT13:
	.string "helper2 works!"
	.section	.rodata
	.align 8
.LSLIT14:
	.string "helper3 works!"
	.section	.rodata
	.align 8
.LSLIT15:
	.string "something wrong with helper3!"
.text
	.global main
	main:
		stp	x29, x30, [sp, #-80]!
		str	x0, [sp, 16]
		str	x1, [sp, 24]
		str	x9, [sp, 32]
		str	x10, [sp, 40]
		str	x11, [sp, 48]
		str	x12, [sp, 56]
		str	x13, [sp, 64]
		str	x14, [sp, 72]
		str	x15, [sp, 80]
		mov	x9, 15
		mov	x0, x9
		bl	recurse
		ldr	x9, [sp, 32]
		ldr	x10, [sp, 40]
		ldr	x11, [sp, 48]
		ldr	x12, [sp, 56]
		ldr	x13, [sp, 64]
		ldr	x14, [sp, 72]
		ldr	x15, [sp, 80]
		mov	x9, x0
		adrp	x9, .LSLIT16
		add	x9, x9, :lo12:.LSLIT16
		mov	x0, x9
		bl	print_string
		str	x9, [sp, 32]
		str	x10, [sp, 40]
		str	x11, [sp, 48]
		str	x12, [sp, 56]
		str	x13, [sp, 64]
		str	x14, [sp, 72]
		str	x15, [sp, 80]
		bl	complex
		ldr	x9, [sp, 32]
		ldr	x10, [sp, 40]
		ldr	x11, [sp, 48]
		ldr	x12, [sp, 56]
		ldr	x13, [sp, 64]
		ldr	x14, [sp, 72]
		ldr	x15, [sp, 80]
		mov	x9, x0
		mov	x9, 0
		mov	x0, x9
		ldp	x29, x30, [sp], #80
		ret
		ldp	x29, x30, [sp], #80
		ret
	.section	.rodata
	.align 8
.LSLIT16:
	.string "\n"
