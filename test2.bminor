// testing print statements of multiple types both individually as well as on one line


x : integer = 19;

main : function integer (argc : integer, argv : array[] string) = {

    // computer the exponentiation of two variables
    y : integer;
    y = 4;
    print x ^ (y + 3);
    str1 : string = "hello there!";
    str2 : string = "hello there!";
    str3 : string = "hello there!";

    print str1, str2, str3;
    print "literal string!", "\n", "LET'S FUCKING GOOOOO!!!!!!";
    return 0;
}

test : function void () = {
    str4 : string = "hello there!";
    str5 : string = "hello there!";

}

/*
.arch armv8-a
.file   "output.s"

.data
        .global x
x:      .word 19
.text
        .global main
        main:
                stp     x29, x30, [sp, #-200]!
                mov     x9, #4
                str     x9, [sp, 32]
                ldr     x9, x
                ldr     x10, [sp, 32]
                mov     x11, #3
                add     x11, x10, x11
                mov     x0, x9
                mov     x1, x11
                bl      integer_power
                mov     x11, x0
                mov     x0, x11
                bl      print_integer
                adrp    x10, .L3
                add     x10, x10, :lo12:.L3
                mov     x0, x10
                bl      print_string
                adrp    x10, .L4
                add     x10, x10, :lo12:.L4
                mov     x0, x10
                bl      print_string
                adrp    x10, .L5
                add     x10, x10, :lo12:.L5
                mov     x0, x10
                bl      print_string
                adrp    x10, .LT1
                add     x10, x10, :lo12:.LT1
                mov     x0, x10
                bl      print_string
                adrp    x10, .LT2
                add     x10, x10, :lo12:.LT2
                mov     x0, x10
                bl      print_string
                adrp    x10, .LT3
                add     x10, x10, :lo12:.LT3
                mov     x0, x10
                bl      print_string
                mov     x10, #0
                mov     x0, x10
                ldp     x29, x30, [sp], #200
                ret
                ldp     x29, x30, [sp], #200
                ret
.L3:
        .string "hello there!"
.L4:
        .string "hello there!"
.L5:
        .string "hello there!"
.LT1:
        .string "literal string!"
.LT2:
        .string "\n"
.LT3:
        .string "LET'S FUCKING GOOOOO!!!!!!"
.text
        .global test
        test:
                stp     x29, x30, [sp, #-200]!
                ldp     x29, x30, [sp], #200
                ret
.L0:
        .string "hello there!"
.L1:
        .string "hello there!"
*/