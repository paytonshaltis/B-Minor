// testing print statements of multiple types both individually as well as on one line

print7string : function void (str1: string, str2: string, str3: string, str4: string, str5: string, str6: string);

main : function integer (argc : integer, argv : array [] string) = {
    str1 : string = "one ";
    str3 : string = "three ";
    str5 : string = "five ";

    print7string(str1, str1, str1, str1, str1, str1);
}

str2 : string = "two ";
str4 : string = "four ";
str6 : string = "six ";

print0string : function void () = {
    print "empty\n";
}

print1string : function void (str1: string) = {
    print str1, "\n";
}

print2string : function void (str1: string, str2: string) = {
    print str1, str2, "\n";    
}

print3string : function void (str1: string, str2: string, str3: string) = {
    print str1, str2, str3, "\n";    
}

print4string : function void (str1: string, str2: string, str3: string, str4: string) = {
    print str1, str2, str3, str4, "\n";   
}

print5string : function void (str1: string, str2: string, str3: string, str4: string, str5: string) = {
    print str1, str2, str3, str4, str5, "\n";
}

print6string : function void (str1: string, str2: string, str3: string, str4: string, str5: string, str6: string) = {
    print str1, str2, str3, str4, str5, str6, "\n";
}

print7string : function void (str1: string, str2: string, str3: string, str4: string, str5: string, str6: string) = {
    print str1, str2, str3, str4, str5, str6, "\n";
}
/*
main : function integer (argc : integer, argv : array [] string) = {
    str1 : string = "one ";
    str3 : string = "three ";
    str5 : string = "five ";
    
    print0string();
    print1string(str1);
    print2string(str1, str2);
    print3string(str1, str2, str3);
    print4string(str1, str2, str3, str4);
    print5string(str1, str2, str3, str4, str5);
    print6string(str1, str2, str3, str4, str5, str6);
    print7string(str1, str2, str3, str4, str5, str6, str6);

    return 0;
}
*/

/*
.arch armv8-a
.file   "output.s"

.data
        .global x
x:      .word 5
.text
        .global fxnCall
        fxnCall:
                stp     x29, x30, [sp, #-200]!
                ldr     x9, x
                mov     x10, #4
                mul     x10, x9, x10
                mov     x0, x10
                ldp     x29, x30, [sp], #200
                ret
                ldp     x29, x30, [sp], #200
                ret
.text
        .global main
        main:
                stp     x29, x30, [sp, #-200]!
                mov     x9, #2
                str     x9, [sp, 16]
                ldr     x9, x
                mov     x10, #10
                add     x10, x9, x10
                ldr     x9, [sp, 16]
                mul     x9, x10, x9
                bl      fxnCall
                sub     x9, x9, x9
                mov     x0, x9
                ldp     x29, x30, [sp], #200
                ret
                ldp     x29, x30, [sp], #200
                ret
*/