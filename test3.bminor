arr : array [10] integer = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; 

main: function void () = {

	i : integer;

	for(i = 0; i < 10; i++) {
		if(i % 2 == 0)
                        arr[i] = 69;
                else 
                        arr[i] = arr[3];	
	}

	for(i = 0; i < 10; i++) {
		print arr[i], " ";	
	}

	print "\n";
}

/*
.arch armv8-a
.file   "output.s"

.data
        .global arr
        .align 3
arr:
        .word   1
        .word   2
        .word   3
        .word   4
        .word   5
        .word   6
        .word   7
        .word   8
        .word   9
        .word   10
.text
        .global main
        main:
                stp     x29, x30, [sp, #-72]!
                mov     x9, #0
                str     x9, [sp, 16]
        .LSTMT1:
                ldr     x9, [sp, 16]
                mov     x10, #10
                cmp     x9, x10
                b.lt    .LCOND1
                mov     x10, 0
                b       .LCOND2
        .LCOND1:
                mov     x10, 1
        .LCOND2:
                cmp     x10, 0
                b.eq    .LSTMT2
                ldr     x9, [sp, 16]
                mov     x10, #2
                udiv    x11, x9, x10
                mul     x11, x10, x11
                sub     x11, x9, x11
                mov     x9, #0
                cmp     x11, x9
                b.eq    .LCOND3
                mov     x9, 0
                b       .LCOND4
        .LCOND3:
                mov     x9, 1
        .LCOND4:
                cmp     x9, 0
                b.eq    .LSTMT3
                mov     x10, #69
                mov     x0, x10
                adrp    x11, arr
                add     x11, x11, :lo12:arr
                ldr     x12, [sp, 16]
                mov     x13, 4
                mul     x12, x12, x13
                str     w0, [x11, x12]
                b       .LSTMT4
        .LSTMT3:
                adrp    x10, arr
                add     x10, x10, :lo12:arr
                mov     x11, #3
                mov     x12, 4
                mul     x11, x11, x12
                ldr     w0, [x10, x11]
                mov     x10, x0
                mov     x0, x10
                adrp    x11, arr
                add     x11, x11, :lo12:arr
                ldr     x12, [sp, 16]
                mov     x13, 4
                mul     x12, x12, x13
                str     w0, [x11, x12]
        .LSTMT4:
                ldr     x9, [sp, 16]
                add     x9, x9, 1
                str     x9, [sp, 16]
                b       .LSTMT1
        .LSTMT2:
                mov     x9, #0
                str     x9, [sp, 16]
        .LSTMT5:
                ldr     x9, [sp, 16]
                mov     x10, #10
                cmp     x9, x10
                b.lt    .LCOND5
                mov     x10, 0
                b       .LCOND6
        .LCOND5:
                mov     x10, 1
        .LCOND6:
                cmp     x10, 0
                b.eq    .LSTMT6
                adrp    x9, arr
                add     x9, x9, :lo12:arr
                ldr     x10, [sp, 16]
                mov     x11, 4
                mul     x10, x10, x11
                ldr     w0, [x9, x10]
                mov     x9, x0
                mov     x0, x9
                bl      print_integer
                adrp    x9, .LSLIT1
                add     x9, x9, :lo12:.LSLIT1
                mov     x0, x9
                bl      print_string
                ldr     x9, [sp, 16]
                add     x9, x9, 1
                str     x9, [sp, 16]
                b       .LSTMT5
        .LSTMT6:
                adrp    x9, .LSLIT2
                add     x9, x9, :lo12:.LSLIT2
                mov     x0, x9
                bl      print_string
                ldp     x29, x30, [sp], #72
                ret
        .section        .rodata
        .align 8
.LSLIT1:
        .string " "
        .section        .rodata
        .align 8
.LSLIT2:
        .string "\n"
*/