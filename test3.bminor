scores : array [10] integer = {97, 87, 83, 99, 77, 80, 72, 100, 92, 88}; 

main: function void () = {

	str : string = "hello world";
	//"string" = str;


}

/*
.arch armv8-a
.file   "output.s"

.data
        .global scores
        .align 3
scores:
        .word   97
        .word   87
        .word   83
        .word   99
        .word   77
        .word   80
        .word   72
        .word   100
        .word   92
        .word   88
.text
        .global main
        main:
                stp     x29, x30, [sp, #-72]!
                mov     x9, #200
                adrp    x10, scores
                add     x10, x10, :lo12:scores
                mov     x11, #9
                mov     x12, 4
                mul     x11, x11, x12
                mov     x0, x9
                str     w0, [x10, x11]
                adrp    x9, scores
                add     x9, x9, :lo12:scores
                mov     x10, #9
                mov     x11, 4
                mul     x10, x10, x11
                ldr     w0, [x9, x10]
                mov     x9, x0
                adrp    x10, scores
                add     x10, x10, :lo12:scores
                mov     x11, #7
                mov     x12, 4
                mul     x11, x11, x12
                mov     x0, x9
                str     w0, [x10, x11]
                adrp    x9, scores
                add     x9, x9, :lo12:scores
                mov     x10, #7
                mov     x11, 4
                mul     x10, x10, x11
                ldr     w0, [x9, x10]
                mov     x9, x0
                adrp    x10, scores
                add     x10, x10, :lo12:scores
                mov     x11, #5
                mov     x12, 4
                mul     x11, x11, x12
                mov     x0, x9
                str     w0, [x10, x11]
                adrp    x9, scores
                add     x9, x9, :lo12:scores
                mov     x10, #5
                mov     x11, 4
                mul     x10, x10, x11
                ldr     w0, [x9, x10]
                mov     x9, x0
                adrp    x10, scores
                add     x10, x10, :lo12:scores
                mov     x11, #3
                mov     x12, 4
                mul     x11, x11, x12
                mov     x0, x9
                str     w0, [x10, x11]
                adrp    x9, scores
                add     x9, x9, :lo12:scores
                mov     x10, #3
                mov     x11, 4
                mul     x10, x10, x11
                ldr     w0, [x9, x10]
                mov     x9, x0
                adrp    x10, scores
                add     x10, x10, :lo12:scores
                mov     x11, #1
                mov     x12, 4
                mul     x11, x11, x12
                mov     x0, x9
                str     w0, [x10, x11]
                mov     x9, #300
                adrp    x10, scores
                add     x10, x10, :lo12:scores
                mov     x11, #2
                mov     x12, 4
                mul     x11, x11, x12
                mov     x0, x9
                str     w0, [x10, x11]
                adrp    x9, scores
                add     x9, x9, :lo12:scores
                mov     x10, #2
                mov     x11, 4
                mul     x10, x10, x11
                ldr     w0, [x9, x10]
                mov     x9, x0
                adrp    x10, scores
                add     x10, x10, :lo12:scores
                mov     x11, #0
                mov     x12, 4
                mul     x11, x11, x12
                mov     x0, x9
                str     w0, [x10, x11]
                mov     x9, #300
                adrp    x10, scores
                add     x10, x10, :lo12:scores
                mov     x11, #4
                mov     x12, 4
                mul     x11, x11, x12
                mov     x0, x9
                str     w0, [x10, x11]
                mov     x9, #300
                adrp    x10, scores
                add     x10, x10, :lo12:scores
                mov     x11, #8
                mov     x12, 4
                mul     x11, x11, x12
                mov     x0, x9
                str     w0, [x10, x11]
                adrp    x9, scores
                add     x9, x9, :lo12:scores
                mov     x10, #8
                mov     x11, 4
                mul     x10, x10, x11
                ldr     w0, [x9, x10]
                mov     x9, x0
                adrp    x10, scores
                add     x10, x10, :lo12:scores
                mov     x11, #6
                mov     x12, 4
                mul     x11, x11, x12
                mov     x0, x9
                str     w0, [x10, x11]
                mov     x9, #0
                str     x9, [sp, 16]
                mov     x9, #0
                str     x9, [sp, 16]
        .LSTMT1:
                ldr     x9, [sp, 16]
                mov     x10, #10
                cmp     x9, x10
                b.lt    .LCOND1
                mov     x10, 0
                b       .LCOND2
        .LCOND1:
                mov     x10, 1
        .LCOND2:
                cmp     x10, 0
                b.eq    .LSTMT2
                adrp    x9, scores
                add     x9, x9, :lo12:scores
                ldr     x10, [sp, 16]
                mov     x11, 4
                mul     x10, x10, x11
                ldr     w0, [x9, x10]
                mov     x9, x0
                mov     x0, x9
                bl      print_integer
                adrp    x9, .LSLIT1
                add     x9, x9, :lo12:.LSLIT1
                mov     x0, x9
                bl      print_string
                ldr     x9, [sp, 16]
                add     x9, x9, 1
                str     x9, [sp, 16]
                b       .LSTMT1
        .LSTMT2:
                adrp    x9, .LSLIT2
                add     x9, x9, :lo12:.LSLIT2
                mov     x0, x9
                bl      print_string
                ldp     x29, x30, [sp], #72
                ret
        .section        .rodata
        .align 8
.LSLIT1:
        .string " "
        .section        .rodata
        .align 8
.LSLIT2:
        .string "\n"
*/