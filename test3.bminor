// Uses a complex expression, with a function call
x:integer=5;
fxnCall:function integer() =
{
	return x*4;
}
main:function integer () =
{
	y:integer = 2;
	return (x + 10) * y - fxnCall();
}

/*
.arch armv8-a
.file   "output.s"

.data
        .global x
x:      .word 5
.text
        .global fxnCall
        fxnCall:
                stp     x29, x30, [sp, #-200]!
                ldr     x9, x
                mov     x10, #4
                mul     x10, x9, x10
                mov     x0, x10
                ldp     x29, x30, [sp], #200
                ret
                ldp     x29, x30, [sp], #200
                ret
.text
        .global main
        main:
                stp     x29, x30, [sp, #-200]!
                mov     x9, #2
                str     x9, [sp, 16]
                ldr     x9, x
                mov     x10, #10
                add     x10, x9, x10
                ldr     x9, [sp, 16]
                mul     x9, x10, x9
                mov     x19, x9
                mov     x20, x10
                mov     x21, x11
                mov     x22, x12
                mov     x23, x13
                mov     x24, x14
                mov     x25, x15
                bl      fxnCall
                mov     x9, x19
                mov     x10, x20
                mov     x11, x21
                mov     x12, x22
                mov     x13, x23
                mov     x14, x24
                mov     x15, x25
                mov     x10, x0
                sub     x10, x9, x10
                mov     x0, x10
                ldp     x29, x30, [sp], #200
                ret
                ldp     x29, x30, [sp], #200
                ret
*/