// testing a complete program with MANY errors that should prevent successful parsing
// (note that the first incorrect line will cause parsing error, comment out individual parts to confirm each error!)


/* global variables */
g_count : integer = 0;
g_names : array[4] string = {"Payton", "Shaltis", "John", "DeGood"};
g_names2 : array[] string;                                                                  // array must have a size
g_word2 : string = "Monkey";
g_word : string = g_word2;                                                                  // global initializations must be constant

/* function prototypes */
thisString : function void (s : string n : integer);                                        // missing comma
accessArrayChar : function char (arr : array[] char, length : integer) = {};                // should not have have empty curly braces

/* main functions with parameters */
main : function (argc : integer, argv : array[] string) = {                                 // main function missing return type
    // prints elements from the g_names array
    g_word = g_names[0];
    print: "This is ", g_word, " ", g_names[1], ".\n";                                      // improper usage of print statement
    print "\"g_names\" array at index 3: ", accessArrayChar(g_names, 4, 3), ".\n";
    
    / prints a string multiple times                                                        // comment missing second slash
    thisString("Repeating string...\n", 7);

    // doubles g_count until it reaches 64
    g_count+;                                                                               // incomplete expression
    for(;;){
        g_count = g_count * 2;
        if(g_count >= 64) 
            return 0;
    }

    // should never reach this return statement
    return 0;
}

return 0;                                                                                   // cannot have return in global scope

/* function implementation; prints string s n times */
thisString : function void (s : string, n : integer) = {
    i : integer = 0;
    for(i = 0; i < n, i >= 0; i++) {                                                        // expression lists not allowed in for-loop
        print s, "\n";
    }
    print "\n";
    return;
}

/* function implementation; returns the char at position pos in array arr */
accessArrayChar : function char (arr : array char, length : integer, pos : integer) = {     // array needs brackets in function parameter
    if(pos > length - 1) {
        print "Invalid array index! Returning NULL terminator!\n";
        return '\0';
    }
    else {
        return arr[pos][];                                                                  // empty brackets on array access
    }
}