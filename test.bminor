// testing a simple program with integer arithmetic, global vars, local vars, expressions, multiple scopes, and print statements

g_num1 : integer = 65;
g_num2 : integer;

main : function integer (argc : integer, argv : array[] string) = {

    // should print 65 then nothing
    print g_num1;
    print g_num2;

    // declaring some local variables
    x : integer = 90;
    y : integer = -15;
    z : integer;

    // negate the negative number, add 5
    y = -y + 5;

    // compute the mod of 90 and 20, print it
    print x % y;

    // enter a new scope here
    {
        x : integer = 8;
        y : integer = 16;
        print x;
        print y;
    }

    return g_num1;

    // should be 10, add this to g_num1
    g_num1 = g_num1 + (x % y);

    // print the result of the addition
    print g_num1;

}

/*
.arch armv8-a
.file   "output.s"

.data
        .global g_num1
g_num1: .word 65
.data
        .global g_num2
g_num2: .word 
.text
        .global main
        main:
                stp     x29, x30, [sp, #-200]!
                ldr     x9, g_num1
                mov     x0, x9
                bl      print_integer
                ldr     x9, g_num2
                mov     x0, x9
                bl      print_integer
                mov     x9, #90
                str     x9, [sp, 32]
                mov     x9, #15
                neg     x9, x9
                str     x9, [sp, 40]
                ldr     x9, [sp, 40]
                neg     x9, x9
                mov     x10, #5
                add     x10, x9, x10
                str     x10, [sp, 40]
                ldr     x9, [sp, 32]
                ldr     x10, [sp, 40]
                udiv    x11, x9, x10
                mul     x11, x10, x11
                sub     x11, x9, x11
                mov     x0, x11
                bl      print_integer
                mov     x9, #8
                str     x9, [sp, 56]
                mov     x9, #16
                str     x9, [sp, 64]
                ldr     x9, [sp, 56]
                mov     x0, x9
                bl      print_integer
                ldr     x9, [sp, 64]
                mov     x0, x9
                bl      print_integer
                ldr     x9, g_num1
                mov     x0, x9
                ldp     x29, x30, [sp], #200
                ret
                ldr     x10, g_num1
                ldr     x11, [sp, 32]
                ldr     x12, [sp, 40]
                udiv    x13, x11, x12
                mul     x13, x12, x13
                sub     x13, x11, x13
                add     x13, x10, x13
                adrp    x10, g_num1
                add     x10, x10, :lo12:g_num1
                str     x13, [x10]
                ldr     x10, g_num1
                mov     x0, x10
                bl      print_integer
                ldp     x29, x30, [sp], #200
                ret
*/